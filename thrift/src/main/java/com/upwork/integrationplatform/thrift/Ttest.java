/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.upwork.integrationplatform.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)")
public class Ttest implements org.apache.thrift.TBase<Ttest, Ttest._Fields>, java.io.Serializable, Cloneable, Comparable<Ttest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ttest");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CREATED_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("createdTs", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UPDATED_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedTs", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TtestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TtestTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String uid; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String createdTs; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String updatedTs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    CREATED_TS((short)2, "createdTs"),
    UPDATED_TS((short)3, "updatedTs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // CREATED_TS
          return CREATED_TS;
        case 3: // UPDATED_TS
          return UPDATED_TS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UID")));
    tmpMap.put(_Fields.CREATED_TS, new org.apache.thrift.meta_data.FieldMetaData("createdTs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATED_TS, new org.apache.thrift.meta_data.FieldMetaData("updatedTs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ttest.class, metaDataMap);
  }

  public Ttest() {
  }

  public Ttest(
    java.lang.String uid,
    java.lang.String createdTs,
    java.lang.String updatedTs)
  {
    this();
    this.uid = uid;
    this.createdTs = createdTs;
    this.updatedTs = updatedTs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Ttest(Ttest other) {
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetCreatedTs()) {
      this.createdTs = other.createdTs;
    }
    if (other.isSetUpdatedTs()) {
      this.updatedTs = other.updatedTs;
    }
  }

  public Ttest deepCopy() {
    return new Ttest(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    this.createdTs = null;
    this.updatedTs = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUid() {
    return this.uid;
  }

  public void setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
    this.uid = uid;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCreatedTs() {
    return this.createdTs;
  }

  public void setCreatedTs(@org.apache.thrift.annotation.Nullable java.lang.String createdTs) {
    this.createdTs = createdTs;
  }

  public void unsetCreatedTs() {
    this.createdTs = null;
  }

  /** Returns true if field createdTs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedTs() {
    return this.createdTs != null;
  }

  public void setCreatedTsIsSet(boolean value) {
    if (!value) {
      this.createdTs = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUpdatedTs() {
    return this.updatedTs;
  }

  public void setUpdatedTs(@org.apache.thrift.annotation.Nullable java.lang.String updatedTs) {
    this.updatedTs = updatedTs;
  }

  public void unsetUpdatedTs() {
    this.updatedTs = null;
  }

  /** Returns true if field updatedTs is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedTs() {
    return this.updatedTs != null;
  }

  public void setUpdatedTsIsSet(boolean value) {
    if (!value) {
      this.updatedTs = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((java.lang.String)value);
      }
      break;

    case CREATED_TS:
      if (value == null) {
        unsetCreatedTs();
      } else {
        setCreatedTs((java.lang.String)value);
      }
      break;

    case UPDATED_TS:
      if (value == null) {
        unsetUpdatedTs();
      } else {
        setUpdatedTs((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case CREATED_TS:
      return getCreatedTs();

    case UPDATED_TS:
      return getUpdatedTs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case CREATED_TS:
      return isSetCreatedTs();
    case UPDATED_TS:
      return isSetUpdatedTs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Ttest)
      return this.equals((Ttest)that);
    return false;
  }

  public boolean equals(Ttest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_createdTs = true && this.isSetCreatedTs();
    boolean that_present_createdTs = true && that.isSetCreatedTs();
    if (this_present_createdTs || that_present_createdTs) {
      if (!(this_present_createdTs && that_present_createdTs))
        return false;
      if (!this.createdTs.equals(that.createdTs))
        return false;
    }

    boolean this_present_updatedTs = true && this.isSetUpdatedTs();
    boolean that_present_updatedTs = true && that.isSetUpdatedTs();
    if (this_present_updatedTs || that_present_updatedTs) {
      if (!(this_present_updatedTs && that_present_updatedTs))
        return false;
      if (!this.updatedTs.equals(that.updatedTs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
    if (isSetUid())
      hashCode = hashCode * 8191 + uid.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreatedTs()) ? 131071 : 524287);
    if (isSetCreatedTs())
      hashCode = hashCode * 8191 + createdTs.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdatedTs()) ? 131071 : 524287);
    if (isSetUpdatedTs())
      hashCode = hashCode * 8191 + updatedTs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Ttest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedTs()).compareTo(other.isSetCreatedTs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedTs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdTs, other.createdTs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdatedTs()).compareTo(other.isSetUpdatedTs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedTs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedTs, other.updatedTs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Ttest(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdTs:");
    if (this.createdTs == null) {
      sb.append("null");
    } else {
      sb.append(this.createdTs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedTs:");
    if (this.updatedTs == null) {
      sb.append("null");
    } else {
      sb.append(this.updatedTs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TtestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TtestStandardScheme getScheme() {
      return new TtestStandardScheme();
    }
  }

  private static class TtestStandardScheme extends org.apache.thrift.scheme.StandardScheme<Ttest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Ttest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATED_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdTs = iprot.readString();
              struct.setCreatedTsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPDATED_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updatedTs = iprot.readString();
              struct.setUpdatedTsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Ttest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.createdTs != null) {
        oprot.writeFieldBegin(CREATED_TS_FIELD_DESC);
        oprot.writeString(struct.createdTs);
        oprot.writeFieldEnd();
      }
      if (struct.updatedTs != null) {
        oprot.writeFieldBegin(UPDATED_TS_FIELD_DESC);
        oprot.writeString(struct.updatedTs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TtestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TtestTupleScheme getScheme() {
      return new TtestTupleScheme();
    }
  }

  private static class TtestTupleScheme extends org.apache.thrift.scheme.TupleScheme<Ttest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Ttest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetCreatedTs()) {
        optionals.set(1);
      }
      if (struct.isSetUpdatedTs()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetCreatedTs()) {
        oprot.writeString(struct.createdTs);
      }
      if (struct.isSetUpdatedTs()) {
        oprot.writeString(struct.updatedTs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Ttest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.createdTs = iprot.readString();
        struct.setCreatedTsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.updatedTs = iprot.readString();
        struct.setUpdatedTsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

